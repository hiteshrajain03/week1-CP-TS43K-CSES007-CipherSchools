Q1 Merge two sorted linked lists /////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(!list1 && !list2) {
            return NULL;
        }
        if(!list1) {
            return list2;
        }
        if(!list2) {
            return list1;
        }
        ListNode *temp, *head;
        if(list1->val < list2->val) 
        {
            head = list1;
            temp = list1;
            list1 = list1->next;
        }
        else {
            head = list2;
            temp = list2;
            list2 = list2->next;
        }
        while(list1 != NULL && list2 != NULL) {
            if(list1->val < list2->val) {
                temp->next = list1;
                temp = temp->next;
                list1 = list1->next;
            }
            else {
                temp->next = list2;
                temp = temp->next;
                list2 = list2->next;
            }
        }
        if(list1 != NULL) {
            temp->next = list1;
        }
        else {
            temp->next = list2;
        }
        return head;
    }
};

Q2 Reverse LL ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL || head->next == NULL) {
            return head;
        }
        ListNode* rev = reverseList(head->next);
        head->next->next = head;
        head->next = NULL;
        return rev;
    }
};

Q3 Intersection of two LL //////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *A, ListNode *B) {
        ListNode *small = A;
        ListNode *big = B;
        while(small != big) {
            if(small->next==NULL&&big->next==NULL)
            {
                return NULL;
            }

            if(big->next == NULL) {
                big = A;
            }
            else {
                big = big->next;
            }
            if(small->next == NULL) {
                small = B;
            }
            else {
                small = small->next;
            }            
        }
        return small;
    }
};

Q4 Loop in LL /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head == NULL) {
            return false;
        }
        ListNode *a = head;
        ListNode *b = head;
        while(a != NULL && a->next != NULL)
        {
            a = a->next->next;
            b = b->next;
            if(a == b) {
                return true;
            }
        }
        return false;
    }
};

Q5 Remove nth element from end LL ///////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(n<0 || head == NULL)
        return head;
    if(head->next == NULL )
        return NULL;
    
    ListNode *p = head;
    ListNode *count = head;
    
    int length=0;
    while(count){
        length+=1;
        count=count->next;
    }
    if(length-n == 0)
        return head->next;
    else
        for(int i = 1; i<(length-n);i++)
            p=p->next;
    p->next = p->next->next;
    return head;
    }
};








