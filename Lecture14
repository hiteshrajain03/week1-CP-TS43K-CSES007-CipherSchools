Q1(Remove duplicates from sorted LL)//////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode *ans = new ListNode(0);
        ListNode *curr = ans;

        while(head) {
            while(head->next && head -> val == head -> next -> val) head = head -> next;
            curr -> next = head;
            curr = head;
            head = head -> next;
        }
        return ans->next;
    }
};

Q3(Rotate LL)/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head == NULL || head->next == NULL || k == 0) {
            return head;
        }

        int count = 0;
        ListNode* cur = head;

        while(cur != NULL) {
            cur = cur->next;
            count++;
        }
        k = k % count;
        if(k == 0) {
            return head;
        }
        ListNode* left = head;
        ListNode* right = head;
        
        for(int i = 0; i < k; i++) {
            right = right->next;
        }

        while(right->next != NULL) {
            left = left->next;
            right = right->next;
        }
        cur = left->next;
        right->next = head;
        left->next = NULL;
        return cur;
    }
};

Q5(generate LL copy)/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node *iter = head; 
          Node *front = head;

          while (iter != NULL) {
            front = iter->next;

            Node *copy = new Node(iter->val);
            iter->next = copy;
            copy->next = front;

            iter = front;
          }

          iter = head;
          while (iter != NULL) {
            if (iter->random != NULL) {
              iter->next->random = iter->random->next;
            }
            iter = iter->next->next;
          }

          iter = head;
          Node *pseudoHead = new Node(0);
          Node *copy = pseudoHead;

          while (iter != NULL) {
            front = iter->next->next;

            copy->next = iter->next;

            iter->next = front;
              
            copy = copy -> next; 
            iter = front;
          }

          return pseudoHead->next;
    }
};
