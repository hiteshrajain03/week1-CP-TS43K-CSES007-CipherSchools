Q1 Sudoku solver /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }

    bool solve(vector<vector<char>>& board) {
        for(int i = 0; i < board.size(); i++) {
            for(int j = 0; j < board[0].size(); j++) {
                if(board[i][j] == '.') {
                    for(int k = '1'; k <= '9'; k++) {
                        if(isvalid(board, i, j, k)) {
                            board[i][j] = k;
                            if(solve(board) == true) {
                                return true;
                            }
                            else {
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    bool isvalid(vector<vector<char>> & board, int row, int col, char k) {
    for(int i = 0; i < 9; i++) {
        if(board[row][i] == k) {
            return false;
        }
        if(board[i][col] == k) {
            return false;
        }
    }
    int r = row - (row % 3);
    int c = col - (col % 3);
    for(int i = r; i < r + 3; i++) {
        for(int j = c; j < c + 3; j++) {
            if(board[i][j] == k) {
                return false;
            }
        }
    }
    return true;
}
};

Q2 Knight Tour ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    pair<int, int> dir[8] = {{-2, -1}, {-1, -2}, {1, -2}, {2, -1}, 
                             {-1, 2}, {-2, 1}, {2, 1}, {1, 2}};
    
    bool knightCheck(vector<vector<int>>& grid, int x, int y, int count, vector<vector<int>>& v) {
        if(x < 0 || x >= grid.size() || y < 0 || y >= grid.size() || v[x][y] != -1 || grid[x][y] != count) {
            return false;
        }
        if(count == grid.size() * grid.size() - 1) {
            return true;
        }
        v[x][y] = count;
        for(int i = 0; i < 8; i++) {
            if(knightCheck(grid, x + dir[i].first, y + dir[i].second, count + 1, v)) {
                return true;
            }
        }
        v[x][y] = -1;
        return false;
    }

    bool checkValidGrid(vector<vector<int>>& grid) {
        vector<vector<int>> v(grid.size(), vector<int>(grid.size(), -1));
        return knightCheck(grid, 0, 0, 0, v);
    }
};


